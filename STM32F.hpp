#ifndef STM32F_HPP_INCLUDED#define STM32F_HPP_INCLUDED/**@file@author Alexander Panasyuk*//// @cond// #include <stm32f303xe.h> // include this beforehand#include <stm32f3xx_hal.h>#include <core_cm4.h>#include <cmsis_gcc.h>/// @endcondnamespace avp {  class InterruptStopper {      uint32_t prim;    public:      InterruptStopper() {        prim = __get_PRIMASK();        __disable_irq();      }      ~InterruptStopper() {        __set_PRIMASK(prim);      }  }; // class InterruptStopper  static auto MCU_Ticks_init = []() {    /* enable DWT processor clock counter */    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;    // DWT->LAR = 0xC5ACCE55;    DWT->CYCCNT = 0;    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  }; // MCU_Ticks_init  ALWAYS_INLINE uint32_t MCU_Ticks() { return DWT->CYCCNT; }} // namespace avpextern inline uint32_t millis() { return HAL_GetTick(); }extern inline void hang_cpu() {  /* Disable all interrupts */  __disable_irq();  static volatile int WaitForever = 1; // we can reset this var in debugger to continue execution and see where error came from  while(WaitForever);  __enable_irq();} // hang_cpu#endif /* STM32F_HPP_INCLUDED */